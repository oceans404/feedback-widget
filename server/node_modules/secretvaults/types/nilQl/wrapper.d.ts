export namespace KeyType {
    let CLUSTER: string;
    let SECRET: string;
}
export namespace OperationType {
    let STORE: string;
    let SUM: string;
    let MATCH: string;
}
/**
 * NilQLWrapper provides encryption and decryption of data using Nillion's technology.
 * It generates and manages secret keys, splits data into shares when encrypting,
 * and recombines shares when decrypting.
 *
 * @example
 * const wrapper = new NilQLWrapper(cluster);
 * await wrapper.init();
 * const shares = await wrapper.encrypt(sensitiveData);
 */
export class NilQLWrapper {
    constructor(cluster: any, operation?: string, secretKey?: any, secretKeySeed?: any, keyType?: string);
    cluster: any;
    secretKey: any;
    secretKeySeed: any;
    operation: {
        [x: string]: boolean;
    };
    keyType: string;
    /**
     * Initializes the NilQLWrapper by generating and storing a secret key
     * for the cluster. This must be called before any encryption/decryption operations.
     * @returns {Promise<void>}
     */
    init(): Promise<void>;
    /**
     * Encrypts data using the initialized secret key
     * @param {any} data - The data to encrypt
     * @throws {Error} If NilQLWrapper hasn't been initialized
     * @returns {Promise<string | string[] | number[] | number[][]>} Array of encrypted shares
     */
    encrypt(data: any): Promise<string | string[] | number[] | number[][]>;
    /**
     * Decrypts data using the initialized secret key and provided shares
     * @param {Array} shares - Array of encrypted shares to decrypt
     * @throws {Error} If NilQLWrapper hasn't been initialized
     * @returns {Promise<any>} The decrypted data
     */
    decrypt(shares: any[]): Promise<any>;
    /**
     * Recursively encrypts all values marked with %allot in the given data object
     * and prepares it for secure processing.
     *
     * - Traverses the entire object structure, handling nested objects at any depth.
     * - Encrypts values associated with the %allot key using nilql.encrypt().
     * - Preserves non-%allot values and maintains the original object structure.
     * - Calls nilql.allot() on the fully processed data before returning.
     *
     * @param {object} data - The input object containing fields marked with %allot for encryption.
     * @throws {Error} If NilQLWrapper has not been initialized with a secret key.
     * @returns {Promise<object>} The processed object with encrypted %allot values.
     */
    prepareAndAllot(data: object): Promise<object>;
    /**
     * Recombines encrypted shares back into original data structure
     * @param {Array} shares - Array of shares from prepareAndAllot
     * @throws {Error} If NilQLWrapper hasn't been initialized
     * @returns {Promise<object>} Original data structure with decrypted values
     */
    unify(shares: any[]): Promise<object>;
}
